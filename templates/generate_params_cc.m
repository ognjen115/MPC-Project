
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Copyright (c) 2025, Amon Lahr, Simon Muntwiler, Antoine Leeman, Fabian Fl√ºrenbrock & Marco Heim Institute for Dynamic Systems and Control, ETH Zurich.
%
% All rights reserved.
%
% Please see the LICENSE file that has been included as part of this package.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [params] = generate_params_cc()
    params = struct();
    Tf = 60* 60; % = 60*60s = 60 minutes (Simulation time)
    dt = 60;    % = 60s (Discretization time step)

    % model
    params.model = struct(...
        'nx', 3, ...
        'nu', 2, ...
        'nd', 3, ... % number of disturbances
        'ny', 3, ...
        'm1', 200*1000, ...
        'm2', 400*1000, ...
        'm3', 500*1000, ...
        'a1o', 0.1e2, ...
        'a2o', 1e2, ...
        'a3o', 3e2, ...
        'a12', 0.75e2, ...
        'a23', 2e2, ...
        'TimeStep', dt ...
    );

    % constraints
    params.constraints = struct(...
        'T1Max', -15, ...
        'T1Min', -1000, ...
        'T2Max', 4, ...
        'T2Min', 0, ...
        'T3Max', 1000, ...
        'T3Min', -1000, ...
        'P1Max', 0, ...
        'P2Max', 0, ...
        'P1Min', -2500, ...
        'P2Min', -2000 ...
        );

    params.exercise = struct(...
        'SimHorizon', ceil(Tf / dt), ...
        'MPCHorizon', 60, ...
        'InitialConditionA', [-18; 1.3; 7.32], ...
        'InitialConditionB', [-22; 0; 2.82], ...
        'InitialConditionC', [12; 12; 12], ...
        'T_ref', [-21; 0.3], ...
        'To', 12, ...
        'QdiagOpt', [1, 1, 0], ...
        'RdiagOpt', [2.4, 0.5] * 1e-5, ...
        'x0_est', zeros(params.model.nx, 1), ...
        'd0_est', zeros(params.model.nd, 1), ...
        'etaA', zeros(3,1), ...
        'etaB', [200; 100; 0], ...
        'To_min', 10, ...
        'To_max', 14, ...
        'eta_max', 100*ones(3,1), ...
        'eta_min', 0*ones(3,1) ...
         );

    params.exercise.H_tube = [...
             0         0    0.3282;...
             0    0.9153   -0.0000;...
       -0.9270   -0.0000   -0.0000;...
        0.9319   -0.0000    0.0000;...
        0.0000   -0.9510    0.0000;...
       -0.0000   -0.0000   -0.2904
        ];
    params.exercise.h_tube = [...
        0.9446;...
        0.4028;...
        0.3751;...
        0.3626;...
        0.3092;...
        0.9569];

    params.exercise.K_tube = 1.0e+03 * [...
        -0.9278,   -0.0598,         0;...
        -0.0636,   -2.3695,         0];
    
    params.model.C = eye(params.model.ny, params.model.nx);
    params.model.Cd = zeros(params.model.nx, params.model.nd);
    params.model.C_ref = eye(size(params.exercise.T_ref,1), params.model.nx);
    params.model.D = zeros(params.model.nx, params.model.nu);

    % CONTINUE BELOW THIS LINE

    % === Task 1: Continuous-time model ===
    [Ac, Bc, Bcd] = generate_system_cont_cc(params);

    % === Task 2: Discrete-time model ===
    [A, B, Bd] = discretize_system_dist(Ac, Bc, Bcd, params);

    % Save to params.model
    params.model.A = A;
    params.model.B = B;
    params.model.Bd = Bd;

    % === Task 3: Constraints ===
    [Hu, hu, Hx, hx] = generate_constraints_cc(params);

    % Save to params.constraints
    params.constraints.InputMatrix = Hu;
    params.constraints.InputRHS = hu;
    params.constraints.StateMatrix = Hx;
    params.constraints.StateRHS = hx;

end
